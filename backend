from flask import Flask, request, jsonify,make_response, session # importing flask and request 
from flask_restful import Api # importing api
from flask_cors import CORS  # Importing cors
from flask_sqlalchemy import SQLAlchemy #importing sqlalchemy
from flask_migrate import Migrate  # importing migrate
from flask_swagger_ui import get_swaggerui_blueprint #imprting swagger_ui
from flask_jwt_extended import JWTManager, get_jwt_identity, create_access_token, jwt_required
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import unset_jwt_cookies
from sqlalchemy import or_



app = Flask(__name__) # createing a Flask application object 
api = Api(app) # creating the api 

CORS(app) # using cors for making it easy with the frontend

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:5432@localhost:5432/amazon' #creating the connection with the database with all the pg info
# Configure JWT (JSON Web Token) settings
app.config['JWT_SECRET_KEY'] = 'your-secret-key'
jwt = JWTManager
db= SQLAlchemy(app)  #creating a new instance and store it in the “db” variable
jwt = JWTManager(app)
migrate = Migrate(app,db) #make the migration function 
SWAGGER_URL = '/swagger'   # URL for exposing Swagger UI
API_URL = '/static/swagger.json'# Our API url
SWAGGER_BLUEPRINT = get_swaggerui_blueprint(
    SWAGGER_URL,   # Swagger UI static files will be mapped to
    API_URL,
    config={ # Swagger UI config overrides
        'app_name' : "AMAZON BOOKS"

    }
)
app.register_blueprint(SWAGGER_BLUEPRINT, url_prefix = SWAGGER_URL) # the connection for swagger

class Amazon(db.Model):# "Amazon"class that inherits from the “db.Model” class For our table
    __tablename__ ='books'
    id = db.Column(db.Integer, primary_key=True) #we are defining six columns: “id”, “book_name”, “book_author”, “book_title”, “book_price”, “book_rating”, “book_photo”. The primary key of the table is the “id” column, “book_name”, “book_author”, “book_title”, “book_price”, “book_rating”, “book_photo” columns are unique and mandatory. We also define a “repr” method, which returns a string representation of the object.
    book_name = db.Column(db.String(150), unique=True, nullable=False)
    book_author = db.Column(db.String(150), unique=True, nullable=False)
    book_title = db.Column(db.String(150), unique=True, nullable=False)
    book_price = db.Column(db.Integer)
    book_rating = db.Column(db.Integer)
    book_photo = db.Column(db.Text, unique=True, nullable=False)
    carts = db.relationship('ShoppingCart', back_populates='book')
    def __int__(self, book_name, book_author, book_title, book_price, book_rating, book_photo): # the init method using it everytime calling the class for creating a new book.
        self.book_name = book_name
        self.book_author = book_author
        self.book_title = book_title
        self.book_price = book_price
        self.book_rating = book_rating
        self.book_photo = book_photo
    def repr(self):
        return f"<book {self.book_name}>"
# Define the User model
class UserModel(db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    cart_items = db.relationship('ShoppingCart', back_populates='user')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
        

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)



@app.route('/home', methods=['POST', 'GET'])#rout specific URL for home page 
def home():
    if request.method== 'POST':# knowing the request type and insure that's "POST"
        if request.is_json:#Indicates if this request is JSON 
            data = request.get_json() #Parses the incoming JSON request data and returns it
            new_book = Amazon(
                book_name = data['book_name'],
                book_author = data['book_author'],
                book_title = data['book_title'],
                book_price = data['book_price'],
                book_rating = data['book_rating'],
                book_photo = data['book_photo']


            ) #creating a new book with it's new data 
            db.session.add(new_book) #adding the new book in the databse
            db.session.commit()#as the work done with the Session includes new data to be persisted to the database
            return{"messages": f"book {new_book.book_name} has been created succesfully."}# returing a message with the new book name
        else:
            return {"error" : "error creatin book"}# returing error for creation the book
    elif request.method == 'GET': # knowing the request type and insure that's "GET"
         BOOKS = Amazon.query.all() #Here, we use the User.query.all() method to retrieve all the books from the database
         results = [
             {
                 "book_name" : book.book_name,
                 "book_author" : book.book_author,
                 "book_title" : book. book_title,
                 "book_price" : book. book_price,
                 "book_rating" : book.book_rating,
                 "book_photo" : book.book_photo

             } for book in BOOKS #loobing for all Books and add all the books in results
         ]
         return {"BOOKS": results} # returing the books looped for 

@app.route('/update_delete/<book_id>', methods=['GET', 'PUT', 'DELETE'])#rout specific URL for update_delete page the have ['GET', 'PUT', 'DELETE'] for get and update and delete by specific ID for a book 
def book_by_id(book_id):# function for getting a book by a specific id 
    book =  Amazon.query.get_or_404(book_id)#get a book by it's id and 404 errors instead of returning None if didn't got it:
    if request.method == 'GET':# knowing the request type and insure that's "GET"
        response = {
                    
                    "book_name" : book.book_name,
                    "book_author" : book.book_author,
                    "book_title" : book.book_title,
                    "book_price" : book.book_price,
                    "book_rating" : book.book_rating,
                    "book_photo" : book.book_photo
            }
        return{"message": "success", "book":response} #return a message by the response for the book searching for by it's id  
    elif request.method == 'PUT':# else if for the request type method and ensure that it's for updatting
        data = request.get_json()#Parses the incoming JSON request data and returns it in data 
        book.book_name = data['book_name']
        book.book_author = data['book_author']
        book.book_title = data['book_title']
        book.book_price = data['book_price']
        book.book_rating = data['book_rating']
        book.book_photo = data['book_photo']
        db.session.add(book)#adding the new book in the databse
        db.session.commit()#as the work done with the Session includes new data to be persisted to the database
        return {"message": f'Book {book.book_name} succesfully updated'}#returing message with the updated book name
    elif request.method == 'DELETE':#else if for ensure the the request method is delete 
        db.session.delete(book)#deleting a book in the databse with it's id
        db.session.commit()#as the work done with the Session includes new data to be persisted to the database
        return {"message" : f'book {book.book_name} succesfully deleted'}#returing a message that's the book deleted succesfully

# Define the login route
@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    # Find the user by username in the database
    user = UserModel.query.filter_by(username=username).first()
 
    if  user and user.check_password(password,):
        # Create an access token for the authenticated user
        access_token = create_access_token(identity=user.id)
        response = jsonify({'access_token': access_token})
        return response, 200
    else:
        return jsonify({'error': 'Invalid credentials'}), 401


# Define the protected route that requires authentication
@app.route('/protected', methods=['GET'])
@jwt_required()
def protected_route():
    current_user = get_jwt_identity()
    # Return a message indicating successful authentication
    return jsonify({'message': f'hello, {current_user}! you have access to this protected route'}),200
       
# Define the logout route
@app.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    response = jsonify({'message': 'Logged out successfully'})
    unset_jwt_cookies(response)# Unset JWT cookies to log the user out
    return response, 200

# Add a new route for searching books
@app.route('/search', methods=['GET'])
def search_books():
    query = request.args.get('query')  # Get the search query parameter from the request

    if query:
        # Clean and convert the query to lowercase for case-insensitive search
        query = query.strip().lower()
        # Use SQLAlchemy's filter and or_ to search for books by name or author
        books = Amazon.query.filter(
            or_(
                Amazon.book_name.ilike(f'%{query}%'),# Case-insensitive search for book name
                Amazon.book_author.ilike(f'%{query}%')# Case-insensitive search for author name
            )
        ).all()

        results = [ # Format the search results into a list of dictionaries
            {
                "book_name": book.book_name,
                "book_author": book.book_author,
                "book_title": book.book_title,
                "book_price": book.book_price,
                "book_rating": book.book_rating,
                "book_photo": book.book_photo
            }
            for book in books
        ]

        return {"results": results}  # Return the search results as a JSON response
    else:
        return {"message": "Please provide a valid search query"} # Return a message if no valid search query was provided
    
class ShoppingCart(db.Model):
    __tablename__ = 'shopping_carts'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey('books.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)

    # Define relationships
    user = db.relationship('UserModel', back_populates='cart_items')
    book = db.relationship('Amazon', back_populates='carts')

@app.route('/add_to_cart/<book_id>', methods=['POST'])
@jwt_required()
def add_to_cart(book_id):
    user_id = get_jwt_identity()  # Get the current user's ID
    quantity = request.json.get('quantity', 1)  # Get the quantity from the request or default to 1
    
    # Check if the book exists
    book = Amazon.query.get_or_404(book_id)

    # Check if the book is already in the user's cart
    existing_item = ShoppingCart.query.filter_by(user_id=user_id, book_id=book_id).first()

    if existing_item:
        # Update the quantity if the book is already in the cart
        existing_item.quantity += quantity
    else:
        # Create a new cart item
        cart_item = ShoppingCart(user_id=user_id, book_id=book_id, quantity=quantity)
        db.session.add(cart_item)

    db.session.commit()

    return {"message": f"Book {book.book_name} added to cart successfully."}

@app.route('/view_cart', methods=['GET'])
@jwt_required()
def view_cart():
    user_id = get_jwt_identity()  # Get the current user's ID

    # Query the user's cart items
    cart_items = ShoppingCart.query.filter_by(user_id=user_id).all()

    results = [
        {
            "book_name": item.book.book_name,
            "quantity": item.quantity,
            "total_price": item.quantity * item.book.book_price
        }
        for item in cart_items
    ]

    return {"cart_items": results}


    

if __name__ == "__main__":
  app.run(debug=True)# running the app





